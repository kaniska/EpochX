/* 
 * Copyright 2007-2010 Tom Castle & Lawrence Beadle
 * Licensed under GNU General Public License
 * 
 * This file is part of EpochX: genetic programming software for research
 * 
 * EpochX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * EpochX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with EpochX. If not, see <http://www.gnu.org/licenses/>.
 * 
 * The latest version is available from: http:/www.epochx.org
 */
package org.epochx.life;

import java.util.*;

import org.epochx.representation.CandidateProgram;

/**
 * The Life Cycle system in EpochX is managed by an instance of this class. 
 * Users of this class are either event listeners or event providers. 
 * 
 * <h4>Event listeners</h4>
 * 
 * <p>
 * Objects that are interested in listening for life cycle events should use 
 * the set of <code>addXxxListener(XxxListener)</code> methods. In most 
 * circumstances it is beneficial to use an anonymous implementation of one of 
 * the <code>abstract</code> <code>XxxAdapter</code> classes.
 * 
 * <p>
 * For example, to perform an action at the end of each generation:
 * 
 * <pre>
 * LifeCycleManager.getLifeCycleManager().addGenerationListener(new GenerationAdapter() {
 * 		public void onGenerationEnd() {
 * 			... do something ...
 * 		}
 * });
 * </pre>
 * 
 * <h4>Event providers</h4>
 * 
 * <p>
 * For the most part, events are generated by the EpochX framework itself. 
 * Events are raised with a call to one of the <code>onXxx</code> methods. This
 * will trigger a distribution of the event to all appropriate listeners.
 */
public class LifeCycleManager {
	
	// The life cycle listeners.
	private List<ConfigListener> configListeners;
	private List<RunListener> runListeners;
	private List<InitialisationListener> initialisationListeners;
	private List<ElitismListener> elitismListeners;
	private List<PoolSelectionListener> poolSelectionListeners;
	private List<CrossoverListener> crossoverListeners;
	private List<MutationListener> mutationListeners;
	private List<ReproductionListener> reproductionListeners;
	private List<GenerationListener> generationListeners;
	
	public LifeCycleManager() {
		// Initialise listener lists.
		configListeners = new ArrayList<ConfigListener>();
		runListeners = new ArrayList<RunListener>();
		initialisationListeners = new ArrayList<InitialisationListener>();
		elitismListeners = new ArrayList<ElitismListener>();
		poolSelectionListeners = new ArrayList<PoolSelectionListener>();
		crossoverListeners = new ArrayList<CrossoverListener>();
		mutationListeners = new ArrayList<MutationListener>();
		reproductionListeners = new ArrayList<ReproductionListener>();
		generationListeners = new ArrayList<GenerationListener>();
	}
	
	public void addConfigListener(ConfigListener listener) {
		configListeners.add(listener);
	}
	
	public void removeConfigListener(ConfigListener listener) {
		configListeners.remove(listener);
	}
	
	public void addRunListener(RunListener listener) {
		runListeners.add(listener);
	}
	
	public void removeRunListener(RunListener listener) {
		runListeners.remove(listener);
	}
	
	public void addInitialisationListener(InitialisationListener listener) {
		initialisationListeners.add(listener);
	}
	
	public void removeInitialisationListener(InitialisationListener listener) {
		initialisationListeners.remove(listener);
	}
	
	public void addElitismListener(ElitismListener listener) {
		elitismListeners.add(listener);
	}
	
	public void removeElitismListener(ElitismListener listener) {
		elitismListeners.remove(listener);
	}
	
	public void addPoolSelectionListener(PoolSelectionListener listener) {
		poolSelectionListeners.add(listener);
	}
	
	public void removePoolSelectionListener(PoolSelectionListener listener) {
		poolSelectionListeners.remove(listener);
	}
	
	public void addCrossoverListener(CrossoverListener listener) {
		crossoverListeners.add(listener);
	}
	
	public void removeCrossoverListener(CrossoverListener listener) {
		crossoverListeners.remove(listener);
	}
	
	public void addMutationListener(MutationListener listener) {
		mutationListeners.add(listener);
	}
	
	public void removeMutationListener(MutationListener listener) {
		mutationListeners.remove(listener);
	}
	
	public void addReproductionListener(ReproductionListener listener) {
		reproductionListeners.add(listener);
	}
	
	public void removeReproductionListener(ReproductionListener listener) {
		reproductionListeners.remove(listener);
	}
	
	public void addGenerationListener(GenerationListener listener) {
		generationListeners.add(listener);
	}
	
	public void removeGenerationListener(GenerationListener listener) {
		generationListeners.remove(listener);
	}
	
	public void fireConfigureEvent() {
		for (ConfigListener listener: configListeners) {
			listener.onConfigure();
		}
	}

	public void fireRunStartEvent() {
		for (RunListener listener: runListeners) {
			listener.onRunStart();
		}
	}
	
	public void fireSuccessEvent() {
		for (RunListener listener: runListeners) {
			listener.onSuccess();
		}
	}
	
	public void fireRunEndEvent() {
		for (RunListener listener: runListeners) {
			listener.onRunEnd();
		}
	}
	
	public void fireInitialisationStartEvent() {
		for (InitialisationListener listener: initialisationListeners) {
			listener.onInitialisationStart();
		}
	}
	
	public List<CandidateProgram> fireInitialisationEvent(List<CandidateProgram> pop) {
		for (InitialisationListener listener: initialisationListeners) {
			pop = listener.onInitialisation(pop);
			
			if (pop == null) {
				break;
			}
		}
		
		return pop;
	}
	
	public void fireInitialisationEndEvent() {
		for (InitialisationListener listener: initialisationListeners) {
			listener.onInitialisationEnd();
		}
	}
	
	public void fireElitismStartEvent() {
		for (ElitismListener listener: elitismListeners) {
			listener.onElitismStart();
		}
	}
	
	public List<CandidateProgram> fireElitismEvent(List<CandidateProgram> elites) {
		for (ElitismListener listener: elitismListeners) {
			elites = listener.onElitism(elites);
		}
		
		return elites;
	}
	
	public void fireElitismEndEvent() {
		for (ElitismListener listener: elitismListeners) {
			listener.onElitismEnd();
		}
	}
	
	public void firePoolSelectionStartEvent() {
		for (PoolSelectionListener listener: poolSelectionListeners) {
			listener.onPoolSelectionStart();
		}
	}

	public List<CandidateProgram> firePoolSelectionEvent(List<CandidateProgram> pool) {
		for (PoolSelectionListener listener: poolSelectionListeners) {
			pool = listener.onPoolSelection(pool);
			
			if (pool == null) {
				break;
			}
		}
		
		return pool;
	}
	
	public void firePoolSelectionEndEvent() {
		for (PoolSelectionListener listener: poolSelectionListeners) {
			listener.onPoolSelectionEnd();
		}
	}
	
	public void fireCrossoverStartEvent() {
		for (CrossoverListener listener: crossoverListeners) {
			listener.onCrossoverStart();
		}
	}
	
	public CandidateProgram[] fireCrossoverEvent(CandidateProgram[] parents,
			CandidateProgram[] children) {
		for (CrossoverListener listener: crossoverListeners) {
			children = listener.onCrossover(parents, children);
			
			if (children == null) {
				break;
			}
		}
		
		return children;
	}
	
	public void fireCrossoverEndEvent() {
		for (CrossoverListener listener: crossoverListeners) {
			listener.onCrossoverEnd();
		}
	}

	public void fireMutationStartEvent() {
		for (MutationListener listener: mutationListeners) {
			listener.onMutationStart();
		}
	}
	
	public CandidateProgram fireMutationEvent(CandidateProgram parent,
			CandidateProgram child) {
		for (MutationListener listener: mutationListeners) {
			child = listener.onMutation(parent, child);
			
			if (child == null) {
				break;
			}
		}
		
		return child;
	}
	
	public void fireMutationEndEvent() {
		for (MutationListener listener: mutationListeners) {
			listener.onMutationEnd();
		}
	}
	
	public void fireReproductionStartEvent() {
		for (ReproductionListener listener: reproductionListeners) {
			listener.onReproductionStart();
		}
	}

	public CandidateProgram fireReproductionEvent(CandidateProgram child) {
		for (ReproductionListener listener: reproductionListeners) {
			child = listener.onReproduction(child);	
			
			if (child == null) {
				break;
			}
		}
		
		return child;
	}
	
	public void fireReproductionEndEvent() {
		for (ReproductionListener listener: reproductionListeners) {
			listener.onReproductionEnd();
		}
	}
	
	public void fireGenerationStartEvent() {
		for (GenerationListener listener: generationListeners) {
			listener.onGenerationStart();
		}
	}
	
	public List<CandidateProgram> fireGenerationEvent(List<CandidateProgram> pop) {
		for (GenerationListener listener: generationListeners) {
			pop = listener.onGeneration(pop);
			
			if (pop == null) {
				break;
			}
		}
		
		return pop;
	}
	
	public void fireGenerationEndEvent() {
		for (GenerationListener listener: generationListeners) {
			listener.onGenerationEnd();
		}
	}
}
